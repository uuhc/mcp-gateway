apiVersion: v1
kind: ConfigMap
metadata:
  name: app-configs
  namespace: mcp-gateway
data:
  apiserver.yaml: |
    # Logger configuration
    logger:
      level: "${APISERVER_LOGGER_LEVEL:info}"                                         # debug, info, warn, error
      format: "${APISERVER_LOGGER_FORMAT:console}"                                    # json, console
      output: "${APISERVER_LOGGER_OUTPUT:stdout}"                                     # stdout, file
      file_path: "${APISERVER_LOGGER_FILE_PATH:/var/log/unla/apiserver.log}"   # path to log file when output is file
      max_size: ${APISERVER_LOGGER_MAX_SIZE:100}                                      # max size of log file in MB
      max_backups: ${APISERVER_LOGGER_MAX_BACKUPS:3}                                  # max number of backup files
      max_age: ${APISERVER_LOGGER_MAX_AGE:7}                                          # max age of backup files in days
      compress: ${APISERVER_LOGGER_COMPRESS:true}                                     # whether to compress backup files
      color: ${APISERVER_LOGGER_COLOR:true}                                           # whether to use color in console output
      stacktrace: ${APISERVER_LOGGER_STACKTRACE:true}                                 # whether to include stacktrace in error logs

    # i18n configuration
    i18n:
      path: "${APISERVER_I18N_PATH:./configs/i18n}"                                     # path to i18n translation files

    # Super admin configuration
    super_admin:
      username: "${SUPER_ADMIN_USERNAME:admin}"
      password: "${SUPER_ADMIN_PASSWORD:admin}"

    database:
      type: "${APISERVER_DB_TYPE:sqlite}"
      host: "${APISERVER_DB_HOST:localhost}"
      port: ${APISERVER_DB_PORT:5432}
      user: "${APISERVER_DB_USER:postgres}"
      password: "${APISERVER_DB_PASSWORD:example}"
      dbname: "${APISERVER_DB_NAME:./unla.db}"
      sslmode: "${APISERVER_DB_SSL_MODE:disable}"

    # Storage configuration
    storage:
      type: "${GATEWAY_STORAGE_TYPE:db}"  # disk or db
      # Database configuration (only used when type is db)
      database:
        type: "${GATEWAY_DB_TYPE:sqlite}"
        host: "${GATEWAY_DB_HOST:localhost}"
        port: ${GATEWAY_DB_PORT:5432}
        user: "${GATEWAY_DB_USER:postgres}"
        password: "${GATEWAY_DB_PASSWORD:example}"
        dbname: "${GATEWAY_DB_NAME:./data/unla.db}"
        sslmode: "${GATEWAY_DB_SSL_MODE:disable}"
      # Disk configuration (only used when type is disk)
      disk:
        path: "${GATEWAY_STORAGE_DISK_PATH:}"

    # Notifier configuration
    notifier:
      role: "${APISERVER_NOTIFIER_ROLE:sender}"
      # Type of notifier to use (signal, api, redis, composite)
      type: "${APISERVER_NOTIFIER_TYPE:signal}"

      # Signal configuration (only used when type is signal)
      signal:
        signal: "${APISERVER_NOTIFIER_SIGNAL:SIGHUP}"
        pid: "${APISERVER_NOTIFIER_SIGNAL_PID:/var/run/mcp-gateway.pid}"

      # API configuration (only used when type is api)
      api:
        port: ${APISERVER_NOTIFIER_API_PORT:5235}
        target_url: "${APISERVER_NOTIFIER_API_TARGET_URL:http://localhost:5235/_reload}"

      # Redis configuration (only used when type is redis)
      redis:
        addr: "${APISERVER_NOTIFIER_REDIS_ADDR:localhost:6379}"
        password: "${APISERVER_NOTIFIER_REDIS_PASSWORD:UseStrongPasswordIsAGoodPractice}"
        db: ${APISERVER_NOTIFIER_REDIS_DB:0}
        topic: "${APISERVER_NOTIFIER_REDIS_TOPIC:mcp-gateway:reload}"

    openai:
      api_key: "${OPENAI_API_KEY}"
      model: "${OPENAI_MODEL:gpt-4.1}"
      base_url: "${OPENAI_BASE_URL:https://api.openai.com/v1/}"

    # JWT configuration
    jwt:
      secret_key: "${APISERVER_JWT_SECRET_KEY:Pls-Change-Me!}"  # Change this in production
      duration: "${APISERVER_JWT_DURATION:24h}"                  # Token duration
  mcp-gateway.yaml: |-
    port: 5235
    pid: "${MCP_GATEWAY_PID:/var/run/mcp-gateway.pid}"
    reload_interval: ${MCP_GATEWAY_RELOAD_INTERVAL:600s}
    reload_switch: ${MCP_GATEWAY_RELOAD_SWITCH:true}
    # Logger configuration
    logger:
      level: "${LOGGER_LEVEL:info}"                                           # debug, info, warn, error
      format: "${LOGGER_FORMAT:json}"                                         # json, console
      output: "${LOGGER_OUTPUT:stdout}"                                       # stdout, file
      file_path: "${LOGGER_FILE_PATH:/var/log/unla/mcp-gateway.log}"   # path to log file when output is file
      max_size: ${LOGGER_MAX_SIZE:100}                                        # max size of log file in MB
      max_backups: ${LOGGER_MAX_BACKUPS:3}                                    # max number of backup files
      max_age: ${LOGGER_MAX_AGE:7}                                            # max age of backup files in days
      compress: ${LOGGER_COMPRESS:true}                                       # whether to compress backup files
      color: ${LOGGER_COLOR:false}                                            # whether to use color in console output
      stacktrace: ${LOGGER_STACKTRACE:true}                                   # whether to include stacktrace in error logs

    # Storage configuration
    storage:
      type: "${GATEWAY_STORAGE_TYPE:db}"  # disk or db
      # Database configuration (only used when type is db)
      database:
        type: "${GATEWAY_DB_TYPE:sqlite}"
        host: "${GATEWAY_DB_HOST:localhost}"
        port: ${GATEWAY_DB_PORT:5432}
        user: "${GATEWAY_DB_USER:postgres}"
        password: "${GATEWAY_DB_PASSWORD:example}"
        dbname: "${GATEWAY_DB_NAME:./data/unla.db}"
        sslmode: "${GATEWAY_DB_SSL_MODE:disable}"
      # Disk configuration (only used when type is disk)
      disk:
        path: "${GATEWAY_STORAGE_DISK_PATH:}"
      api:
        url: "${GATEWAY_STORAGE_API_URL:}"
        configJSONPath: "${GATEWAY_STORAGE_API_CONFIG_JSON_PATH:}"
        timeout: "${GATEWAY_STORAGE_API_TIMEOUT:30s}"

    # Notifier configuration
    notifier:
      role: "${NOTIFIER_ROLE:receiver}"
      # Type of notifier to use (signal, api, redis, composite(includes signal n api as default))
      type: "${NOTIFIER_TYPE:signal}"

      # Signal configuration (only used when type is signal)
      signal:
        signal: "${NOTIFIER_SIGNAL:SIGHUP}"
        pid: "${NOTIFIER_SIGNAL_PID:/var/run/mcp-gateway.pid}"

      # API configuration (only used when type is api)
      api:
        port: ${NOTIFIER_API_PORT:5235}
        target_url: "${NOTIFIER_API_TARGET_URL:http://localhost:5235/_reload}"

      # Redis configuration (only used when type is redis)
      redis:
        addr: "${NOTIFIER_REDIS_ADDR:localhost:6379}"
        username: "${NOTIFIER_REDIS_USERNAME:default}"
        password: "${NOTIFIER_REDIS_PASSWORD:UseStrongPasswordIsAGoodPractice}"
        db: ${NOTIFIER_REDIS_DB:0}
        topic: "${NOTIFIER_REDIS_TOPIC:mcp-gateway:reload}"

    # Session storage configuration
    session:
      type: "${SESSION_STORAGE_TYPE:memory}"  # memory or redis
      redis:
        addr: "${SESSION_REDIS_ADDR:localhost:6379}"
        username: "${SESSION_REDIS_USERNAME:default}"
        password: "${SESSION_REDIS_PASSWORD:}"
        db: ${SESSION_REDIS_DB:0}
        topic: "${SESSION_REDIS_TOPIC:mcp-gateway:session}"
  mock-user.yaml: |-
    name: "mock-user"
    tenant: "default"

    routers:
      - server: "mock-user"
        prefix: "/mcp/user"
        cors:
          allowOrigins:
            - "*"
          allowMethods:
            - "GET"
            - "POST"
            - "PUT"
            - "OPTIONS"
          allowHeaders:
            - "Content-Type"
            - "Authorization"
            - "Mcp-Session-Id"
          exposeHeaders:
            - "Mcp-Session-Id"
          allowCredentials: true

    servers:
      - name: "mock-user"
        namespace: "user-service"
        description: "Mock User Service"
        allowedTools:
          - "register_user"
          - "get_user_by_email"
          - "update_user_preferences"
          - "update_user_avatar"
        config:
          Cookie: 123
          Authorization: 'Bearer {{ env "AUTH_TOKEN" }}'

    tools:
      - name: "register_user"
        description: "Register a new user"
        method: "POST"
        endpoint: "http://localhost:5236/users"
        headers:
          Content-Type: "application/json"
          Authorization: "{{.Config.Authorization}}"
          Cookie: "{{.Config.Cookie}}"
        args:
          - name: "username"
            position: "body"
            required: true
            type: "string"
            description: "Username"
            default: ""
          - name: "email"
            position: "body"
            required: true
            type: "string"
            description: "Email"
            default: ""
        requestBody: |-
          {
            "username": "{{.Args.username}}",
            "email": "{{.Args.email}}"
          }
        responseBody: |-
          {
            "id": "{{.Response.Data.id}}",
            "username": "{{.Response.Data.username}}",
            "email": "{{.Response.Data.email}}",
            "createdAt": "{{.Response.Data.createdAt}}"
          }

      - name: "get_user_by_email"
        description: "Get user by email"
        method: "GET"
        endpoint: "http://localhost:5236/users/email/{{.Args.email}}"
        args:
          - name: "email"
            position: "path"
            required: true
            type: "string"
            description: "Email"
            default: ""
        responseBody: |-
          {
            "id": "{{.Response.Data.id}}",
            "username": "{{.Response.Data.username}}",
            "email": "{{.Response.Data.email}}",
            "createdAt": "{{.Response.Data.createdAt}}"
          }

      - name: "update_user_preferences"
        description: "Update user preferences"
        method: "PUT"
        endpoint: "http://localhost:5236/users/{{.Args.email}}/preferences"
        headers:
          Content-Type: "application/json"
          Authorization: "{{.Request.Headers.Authorization}}"
          Cookie: "{{.Config.Cookie}}"
        args:
          - name: "email"
            position: "path"
            required: true
            type: "string"
            description: "Email"
            default: ""
          - name: "isPublic"
            position: "body"
            required: true
            type: "boolean"
            description: "Whether the user profile is public"
            default: "false"
          - name: "showEmail"
            position: "body"
            required: true
            type: "boolean"
            description: "Whether to show email in profile"
            default: "true"
          - name: "theme"
            position: "body"
            required: true
            type: "string"
            description: "User interface theme"
            default: "light"
          - name: "tags"
            position: "body"
            required: true
            type: "array"
            items:
              type: "string"
              enum: ["developer", "designer", "manager", "tester"]
            description: "User role tags"
            default: "[]"
        requestBody: |-
          {
            "isPublic": {{.Args.isPublic}},
            "showEmail": {{.Args.showEmail}},
            "theme": "{{.Args.theme}}",
            "tags": {{.Args.tags}}
          }
        responseBody: |-
          {
            "id": "{{.Response.Data.id}}",
            "username": "{{.Response.Data.username}}",
            "email": "{{.Response.Data.email}}",
            "createdAt": "{{.Response.Data.createdAt}}",
            "preferences": {
              "isPublic": {{.Response.Data.preferences.isPublic}},
              "showEmail": {{.Response.Data.preferences.showEmail}},
              "theme": "{{.Response.Data.preferences.theme}}",
              "tags": {{.Response.Data.preferences.tags}}
            }
          }

      - name: "update_user_avatar"
        description: "Update user avatar using a URL via multipart form"
        method: "POST"
        endpoint: "http://localhost:5236/users/{{.Args.email}}/avatar"
        headers:
          Authorization: "{{.Request.Headers.Authorization}}"
          Cookie: "{{.Config.Cookie}}"
        args:
          - name: "email"
            position: "path"
            required: true
            type: "string"
            description: "Email of the user"
            default: ""
          - name: "url"
            position: "form-data"
            required: true
            type: "string"
            description: "The avatar image URL"
            default: ""
        responseBody: |-
          {
            "message": "{{.Response.Data.message}}",
            "avatarUrl": "{{.Response.Data.avatarUrl}}"
          }
  proxy-mcp-exp.yaml: |
    name: "proxy-mcp-exp"
    tenant: "default"

    routers:
      - server: "amap-maps"
        prefix: "/mcp/stdio-proxy"
        cors:
          allowOrigins:
            - "*"
          allowMethods:
            - "GET"
            - "POST"
            - "OPTIONS"
          allowHeaders:
            - "Content-Type"
            - "Authorization"
            - "Mcp-Session-Id"
          exposeHeaders:
            - "Mcp-Session-Id"
          allowCredentials: true
      - server: "mock-user-sse"
        prefix: "/mcp/sse-proxy"
        cors:
          allowOrigins:
            - "*"
          allowMethods:
            - "GET"
            - "POST"
            - "OPTIONS"
          allowHeaders:
            - "Content-Type"
            - "Authorization"
            - "Mcp-Session-Id"
          exposeHeaders:
            - "Mcp-Session-Id"
          allowCredentials: true
      - server: "mock-user-mcp"
        prefix: "/mcp/streamable-http-proxy"
        cors:
          allowOrigins:
            - "*"
          allowMethods:
            - "GET"
            - "POST"
            - "OPTIONS"
          allowHeaders:
            - "Content-Type"
            - "Authorization"
            - "Mcp-Session-Id"
          exposeHeaders:
            - "Mcp-Session-Id"
          allowCredentials: true

    mcpServers:
      - type: "stdio"
        name: "amap-maps"
        command: "npx"
        args:
          - "-y"
          - "@amap/amap-maps-mcp-server"
        env:
          AMAP_MAPS_API_KEY: "{{.Request.Headers.Apikey}}"

      - type: "sse"
        name: "mock-user-sse"
        url: "http://localhost:3000/mcp/user/sse"

      - type: "streamable-http"  # unimplemented for now
        name: "mock-user-mcp"
        url: "http://localhost:3000/mcp/user/mcp"

